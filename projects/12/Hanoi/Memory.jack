// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {

    static Array memory;
    static int freeList;

    /** Initializes memory parameters. */
    function void init() {

        let memory = 0;
        let freeList = 2048;
        let memory[freeList] = 14334;
        let memory[freeList + 1] = 0;
        return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {

        return memory[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {

        let memory[address] = value;
        return;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {

        var int currBase, next, prevNextPtr, ptr;
        let currBase = freeList;
        let next = freeList + 1;
        let prevNextPtr = freeList;
        
        while(memory[currBase] < size + 1){

            let prevNextPtr = next;
            
            let currBase = memory[next];
            let next = memory[next] + 1;
        }

        let ptr = currBase + (memory[currBase] - size);
        let memory[currBase] = memory[currBase] - (size + 1);
        if (memory[currBase] < 2){

            if (prevNextPtr = freeList){
                let freeList = memory[next];
            }
            else{
                let memory[prevNextPtr] = memory[next];
            }
        } 

        
        let memory[ptr - 1] = (size + 1);
        return ptr;

    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {

        var int ptr;
        let ptr = freeList + 1;
        while(~(memory[ptr] = 0)){
            let ptr = memory[ptr] + 1;
        }
        let memory[ptr] = (object - 1);
        let memory[object] = 0;
        return;
    }    
}
