// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {

	field Array s;
	field int len, maxL;
    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
    
    	if (maxLength = 0){
    		let maxLength = 1;
    	}
    	let s = Array.new(maxLength);
    	let len = 0;
    	let maxL = maxLength;
    	return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {

    	do s.dispose();
    	return;
    }

    /** Returns the current length of this String. */
    method int length() {
    	return len;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
    	
    	return s[j];
    }


    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {

    	let s[j] = c;
    	return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {

    	if(len < maxL){
    		let s[len] = c;
    		let len = len + 1;
    	}
    	
    	return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {

    	if (len > 0){
    		let len = len - 1;
    	}
    	
    	return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {

    	var int val, j, c, mask;
    	if (s[0] = 45){
    		let j = 1;
    		let mask = -1;
    	}
    	else{
    		let j = 0;
    		let mask = 1;
    	}

    	let val = 0;

   		while(j < len){
   			let c = s[j];
   			if((c < 48) | (c > 57)){
   				return val;
   			}
   			let val = val * 10;
   			let val = val + (c - 48);
   			let j = j + 1;
   		}
   		return val * mask;
        
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {

    	let len = 0;
    	if (number < 0){
    		do appendChar(45);
    		let number = -number;
    	}
    	do setIntHelper(number);
    	return;

    }

    method void setIntHelper(int number){

    	var int nextNum;
    	if (number < 10){
    		do appendChar(number + 48);
    	}
    	else{
    		let nextNum = number / 10;
    		do setIntHelper(nextNum);
    		do appendChar(number - (nextNum * 10) + 48);
    	}
    	return;
    }

    /** Returns the new line character. */
    function char newLine() {
    	
    	return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {

    	return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {

    	return 34;
    }
}
