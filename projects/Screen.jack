// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {

    static boolean color;
    static Array screen;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {

        let screen = 16384;
        let color = true;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
        
        var int i;
        let i = 0;
        while(i < 8192){
            let screen[i] = false;
            let i = i + 1;
        }

        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        
        let color = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
        var int addr, mask;
        let addr = (y * 32) + (x / 16);
        let mask = twoToThe[x & 15];

        if (color){
            let screen[addr] = screen[addr] | mask;
        }
        else{
            let screen[addr] = screen[addr] & ~mask;
        }
        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {

        var int dx, dy, a, b, temp, diff;
        if (x1 > x2){
        	let temp = x1;
        	let x1 = x2;
        	let x2 = temp;

        	let temp = y1;
	    	let y1 = y2;
	    	let y2 = temp;

        }

    	
        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dy = 0){

        	do Screen.drawHLine(x1, x2, y1);
        }
        else{
        	if (dx = 0){
        		do Screen.drawVLine(x1, y1, y2);
        	}
        	else{
        		if (y2 > y1){
        			let a = 0;
        			let b = 0;
        			let diff = 0;
        			while(~(a > dx) & ~(b > dy)){
        				do Screen.drawPixel(x1 + a, y1 + b);
        				if (diff < 0){
        					let a = a + 1;
        					let diff = diff + dy;
        				}
        				else{
        					let b = b + 1;
        					let diff = diff - dx;
        				}
        			}
        		}
        		else{
        			let a = 0;
        			let b = 0;
        			let diff = 0;
        			while(~(a > dx) & ~(b < dy)){
        				do Screen.drawPixel(x1 + a, y1 + b);
        				if (diff < 0){
        					let a = a + 1;
        					let  diff = diff - dy;
        				}
        				else{
        					let b = b - 1;
        					let diff = diff - dx;
        				}
        			}
        		}
        	}
        }
        return;
        
    }

    function void drawHLine(int x1, int x2, int y){

    	var int a1, a2, w1, w2, mask1, mask2;
    	let a1 = (y * 32) + (x1 / 16);
    	let a2 = (y * 32) + (x2 / 16);
    	let w1 = x1 & 15;
    	let w2 = x2 & 15;

    	let mask1 = twoToThe[w1] - 1;
    	let mask2 = (twoToThe[15 - w2] - 1);

    	let screen[a1] = screen | mask1;
    	if (~(a1 = a2)){
    		let screen[a2] = mask2;
    		let a1 = a1 + 1;
    		while(a1 < a2){
    			let screen[a1] = (twoToThe[15] - 1);
    			let a1 = a1 + 1;
    		}
    	}
    	return;
    	

    }

    function void drawVLine(int x, int y1, int y2){

    	var int temp;
    	if (y1 > y2){
    		let temp = y1;
    		let y1 = y2;
    		let y2 = temp;
    	}

    	while(~(y1 > y2)){
    		do Screen.drawPixel(x, y1);
    		let y1 = y1 + 1;
    	}
    	return;
    }


    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {

        while (y1 < y2){
            do Screen.drawHLine(x1, x2, y1);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {

        var int dx, dy;
        let dy = -r;
        while(~(dy > r)){
        	let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawHLine(cx - dx, cx + dx, cy + dy);
            let dy = dy + 1;
        }
        return;
    }

    function void drawEmptyCircle(int cx, int cy, int r){

        var int dx, dy;
        let dy = -r;
        while(~(dy > r)){
        	let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawPixel(cx - dx, cy + dy);
            do Screen.drawPixel(cx + dx, cy + dy);
            let dy = dy + 1;
        }
        return;
    }
}
