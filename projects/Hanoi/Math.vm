function Math.init 0
push constant 16
call Array.new 1
pop static 0
push static 0
push constant 0
add  
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 1
add  
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 2
add  
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 3
add  
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 4
add  
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 5
add  
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 6
add  
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 7
add  
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 8
add  
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 9
add  
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 10
add  
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 11
add  
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 12
add  
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 13
add  
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 14
add  
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 15
add  
push constant 16384
push constant 16384
add  
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return  
function Math.abs 0
push argument 0
push constant 0
lt  
if-goto IF_TRUE0 
goto IF_FALSE0 
label IF_TRUE0 
push argument 0
neg  
return  
goto IF_END0 
label IF_FALSE0 
push argument 0
return  
label IF_END0 
function Math.multiply 3
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label WHILE_EXP0 
push local 2
push constant 16
lt  
not  
if-goto WHILE_END0 
push argument 1
push local 2
call Math.bit 2
if-goto IF_TRUE1 
goto IF_FALSE1 
label IF_TRUE1 
push local 0
push local 1
add  
pop local 0
goto IF_END1 
label IF_FALSE1 
label IF_END1 
push local 1
push local 1
add  
pop local 1
push local 2
push constant 1
add  
pop local 2
goto WHILE_EXP0 
label WHILE_END0 
push local 0
return  
function Math.divide 3
push argument 0
push constant 0
lt  
push argument 1
push constant 0
lt  
eq  
pop local 2
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push argument 1
push argument 0
gt  
if-goto IF_TRUE2 
goto IF_FALSE2 
label IF_TRUE2 
push constant 0
return  
goto IF_END2 
label IF_FALSE2 
label IF_END2 
push argument 1
push constant 16384
lt  
if-goto IF_TRUE3 
goto IF_FALSE3 
label IF_TRUE3 
push argument 0
push argument 1
push argument 1
add  
call Math.divide 2
pop local 0
goto IF_END3 
label IF_FALSE3 
push constant 0
pop local 0
label IF_END3 
push argument 0
push constant 2
push local 0
call Math.multiply 2  
push argument 1
call Math.multiply 2  
sub  
push argument 1
lt  
if-goto IF_TRUE4 
goto IF_FALSE4 
label IF_TRUE4 
push local 0
push local 0
add  
pop local 1
goto IF_END4 
label IF_FALSE4 
push local 0
push local 0
add  
push constant 1
add  
pop local 1
label IF_END4 
push local 2
if-goto IF_TRUE5 
goto IF_FALSE5 
label IF_TRUE5 
push local 1
return  
goto IF_END5 
label IF_FALSE5 
push local 1
neg  
return  
label IF_END5 
function Math.sqrt 4
push constant 0
pop local 0
push constant 7
pop local 1
label WHILE_EXP1 
push local 1
push constant 0
lt  
not  
not  
if-goto WHILE_END1 
push local 0
push static 0
push local 1
add  
pop pointer 1
push that 0
add  
pop local 2
push local 2
push local 2
call Math.multiply 2  
pop local 3
push local 3
push argument 0
gt  
not  
push local 3
push constant 0
gt  
and  
if-goto IF_TRUE6 
goto IF_FALSE6 
label IF_TRUE6 
push local 2
pop local 0
goto IF_END6 
label IF_FALSE6 
label IF_END6 
push local 1
push constant 1
sub  
pop local 1
goto WHILE_EXP1 
label WHILE_END1 
push local 0
return  
function Math.max 0
push argument 0
push argument 1
gt  
if-goto IF_TRUE7 
goto IF_FALSE7 
label IF_TRUE7 
push argument 0
return  
goto IF_END7 
label IF_FALSE7 
push argument 1
return  
label IF_END7 
function Math.min 0
push argument 0
push argument 1
lt  
if-goto IF_TRUE8 
goto IF_FALSE8 
label IF_TRUE8 
push argument 0
return  
goto IF_END8 
label IF_FALSE8 
push argument 1
return  
label IF_END8 
function Math.pow 2
push argument 1
pop local 0
push constant 1
pop local 1
label WHILE_EXP2 
push local 0
push constant 0
gt  
not  
if-goto WHILE_END2 
push local 1
push argument 0
call Math.multiply 2  
pop local 1
push local 0
push constant 1
sub  
pop local 0
goto WHILE_EXP2 
label WHILE_END2 
push local 1
return  
function Math.bit 0
push argument 0
push static 0
push argument 1
add  
pop pointer 1
push that 0
and  
push constant 0
eq  
not  
return  
function Math.mod 0
push argument 0
push argument 0
push argument 1
call Math.divide 2
push argument 1
call Math.multiply 2  
sub  
return  
function Math.twoToThe 0
push static 0
push argument 0
add  
pop pointer 1
push that 0
return  
