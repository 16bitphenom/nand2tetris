<tokens>
<keyword> class </keyword>
<identifier> Memory </identifier>
<symbol> { </symbol>
<keyword> static </keyword>
<identifier> Array </identifier>
<identifier> memory </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> freeList </identifier>
<symbol> ; </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> init </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> memory </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> freeList </identifier>
<symbol> = </symbol>
<integerConstant> 2048 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> memory </identifier>
<symbol> [ </symbol>
<identifier> freeList </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 14334 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> memory </identifier>
<symbol> [ </symbol>
<identifier> freeList </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> peek </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> address </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> memory </identifier>
<symbol> [ </symbol>
<identifier> address </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> poke </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> address </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> value </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> memory </identifier>
<symbol> [ </symbol>
<identifier> address </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> value </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> alloc </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> size </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> currBase </identifier>
<symbol> , </symbol>
<identifier> next </identifier>
<symbol> , </symbol>
<identifier> prevNextPtr </identifier>
<symbol> , </symbol>
<identifier> ptr </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> currBase </identifier>
<symbol> = </symbol>
<identifier> freeList </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> next </identifier>
<symbol> = </symbol>
<identifier> freeList </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> prevNextPtr </identifier>
<symbol> = </symbol>
<identifier> freeList </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> memory </identifier>
<symbol> [ </symbol>
<identifier> currBase </identifier>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<identifier> size </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> prevNextPtr </identifier>
<symbol> = </symbol>
<identifier> next </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> currBase </identifier>
<symbol> = </symbol>
<identifier> memory </identifier>
<symbol> [ </symbol>
<identifier> next </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> next </identifier>
<symbol> = </symbol>
<identifier> memory </identifier>
<symbol> [ </symbol>
<identifier> next </identifier>
<symbol> ] </symbol>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> ptr </identifier>
<symbol> = </symbol>
<identifier> currBase </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> memory </identifier>
<symbol> [ </symbol>
<identifier> currBase </identifier>
<symbol> ] </symbol>
<symbol> - </symbol>
<identifier> size </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> memory </identifier>
<symbol> [ </symbol>
<identifier> currBase </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> memory </identifier>
<symbol> [ </symbol>
<identifier> currBase </identifier>
<symbol> ] </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<identifier> size </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> memory </identifier>
<symbol> [ </symbol>
<identifier> currBase </identifier>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> prevNextPtr </identifier>
<symbol> = </symbol>
<identifier> freeList </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> freeList </identifier>
<symbol> = </symbol>
<identifier> memory </identifier>
<symbol> [ </symbol>
<identifier> next </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> memory </identifier>
<symbol> [ </symbol>
<identifier> prevNextPtr </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> memory </identifier>
<symbol> [ </symbol>
<identifier> next </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> memory </identifier>
<symbol> [ </symbol>
<identifier> ptr </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> size </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> ptr </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> object </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> ptr </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> ptr </identifier>
<symbol> = </symbol>
<identifier> freeList </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> memory </identifier>
<symbol> [ </symbol>
<identifier> ptr </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> ptr </identifier>
<symbol> = </symbol>
<identifier> memory </identifier>
<symbol> [ </symbol>
<identifier> ptr </identifier>
<symbol> ] </symbol>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> memory </identifier>
<symbol> [ </symbol>
<identifier> ptr </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> object </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> memory </identifier>
<symbol> [ </symbol>
<identifier> object </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
